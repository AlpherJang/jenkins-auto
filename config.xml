<flow-definition plugin="workflow-job@2.35">
    <actions></actions>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.9">
        </hudson.plugins.jira.JiraProjectProperty>
        <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.4">
            <projectUrl>https://github.com/AlpherJang/test/</projectUrl>
            <displayName></displayName>
        </com.coravy.hudson.plugins.github.GithubProjectProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
                <hudson.triggers.TimerTrigger>
                    <spec>H/2 * * * *</spec>
                </hudson.triggers.TimerTrigger>
                <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.29.4">
                    <spec></spec>
                </com.cloudbees.jenkins.GitHubPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
        <script>
node {
    def IMAGE_NAME="test/test"
    def IMAGE_VERSION="1.1"
    def DOCKER_FILE="./dockerfile"
    def COMMIT_ID =""
    def USE_COMMITID=true
    try{
        stage('GIT') {
                git url: 'git://github.com/AlpherJang/test.git', branch: 'master'
                COMMIT_ID=sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                echo "GIT has done"
        }
        stage('SET ENV'){
            if(USE_COMMITID){
                IMAGE_VERSION=COMMIT_ID;
            }
            echo "SET ENV has done"
        }
        stage('BUILD'){
            docker.image("golang").inside{
                sh "go build -v"
            }
        }
        stage('DOCKER BUILD') {
            sh "docker build -t ${IMAGE_NAME}:${IMAGE_VERSION} -f ${DOCKER_FILE} ."
            echo "DOCKER BUILD has done"
        }
        stage("SHOW"){
            echo "Every thing all has done"
        }
    }
    catch(Exception e){
        echo "FAILED!!!!!!!"  
        e.printStackTrace()
    }
    finally{
        echo "Clean workspace now......"
        deleteDir()
    }
    
}
</script>
        <sandbox>true</sandbox>
    </definition>
    <triggers></triggers>
    <disabled>false</disabled>
</flow-definition>